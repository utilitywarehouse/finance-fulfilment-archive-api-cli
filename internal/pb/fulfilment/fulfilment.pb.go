// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fulfilment.proto

package fulfilment

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Tag int32

const (
	BILL_FULFILMENT_REQUEST_TAG_UNDEFINED               Tag = 0
	BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_NON_PRINT   Tag = 1
	BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_PRINT       Tag = 2
	BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_LARGE_PRINT Tag = 3
	BILL_FULFILMENT_REQUEST_TAG_BUSINESS_NON_PRINT      Tag = 4
	BILL_FULFILMENT_REQUEST_TAG_BUSINESS_PRINT          Tag = 5
	BILL_FULFILMENT_REQUEST_TAG_BUSINESS_LARGE_PRINT    Tag = 6
	BILL_FULFILMENT_REQUEST_TAG_CSV                     Tag = 7
)

var Tag_name = map[int32]string{
	0: "BILL_FULFILMENT_REQUEST_TAG_UNDEFINED",
	1: "BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_NON_PRINT",
	2: "BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_PRINT",
	3: "BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_LARGE_PRINT",
	4: "BILL_FULFILMENT_REQUEST_TAG_BUSINESS_NON_PRINT",
	5: "BILL_FULFILMENT_REQUEST_TAG_BUSINESS_PRINT",
	6: "BILL_FULFILMENT_REQUEST_TAG_BUSINESS_LARGE_PRINT",
	7: "BILL_FULFILMENT_REQUEST_TAG_CSV",
}

var Tag_value = map[string]int32{
	"BILL_FULFILMENT_REQUEST_TAG_UNDEFINED":               0,
	"BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_NON_PRINT":   1,
	"BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_PRINT":       2,
	"BILL_FULFILMENT_REQUEST_TAG_RESIDENTIAL_LARGE_PRINT": 3,
	"BILL_FULFILMENT_REQUEST_TAG_BUSINESS_NON_PRINT":      4,
	"BILL_FULFILMENT_REQUEST_TAG_BUSINESS_PRINT":          5,
	"BILL_FULFILMENT_REQUEST_TAG_BUSINESS_LARGE_PRINT":    6,
	"BILL_FULFILMENT_REQUEST_TAG_CSV":                     7,
}

func (Tag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_01bdf0a7aa9dc7a6, []int{0}
}

type BillFulfilmentRequest struct {
	Delivery *Delivery `protobuf:"bytes,1,opt,name=delivery,proto3" json:"delivery,omitempty"`
	Invoice  *Invoice  `protobuf:"bytes,2,opt,name=invoice,proto3" json:"invoice,omitempty"`
	Tag      Tag       `protobuf:"varint,3,opt,name=tag,proto3,enum=fulfilment.Tag" json:"tag,omitempty"`
	Id       string    `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BillFulfilmentRequest) Reset()      { *m = BillFulfilmentRequest{} }
func (*BillFulfilmentRequest) ProtoMessage() {}
func (*BillFulfilmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bdf0a7aa9dc7a6, []int{0}
}
func (m *BillFulfilmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillFulfilmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillFulfilmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillFulfilmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillFulfilmentRequest.Merge(m, src)
}
func (m *BillFulfilmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *BillFulfilmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BillFulfilmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BillFulfilmentRequest proto.InternalMessageInfo

func (m *BillFulfilmentRequest) GetDelivery() *Delivery {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *BillFulfilmentRequest) GetInvoice() *Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

func (m *BillFulfilmentRequest) GetTag() Tag {
	if m != nil {
		return m.Tag
	}
	return BILL_FULFILMENT_REQUEST_TAG_UNDEFINED
}

func (m *BillFulfilmentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BillRefulfilmentRequest struct {
	Delivery  *Delivery `protobuf:"bytes,1,opt,name=delivery,proto3" json:"delivery,omitempty"`
	InvoiceId string    `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	Tag       Tag       `protobuf:"varint,3,opt,name=tag,proto3,enum=fulfilment.Tag" json:"tag,omitempty"`
	Id        string    `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// temporary fields
	AccountId string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Year      string `protobuf:"bytes,6,opt,name=year,proto3" json:"year,omitempty"`
	Month     string `protobuf:"bytes,7,opt,name=month,proto3" json:"month,omitempty"`
}

func (m *BillRefulfilmentRequest) Reset()      { *m = BillRefulfilmentRequest{} }
func (*BillRefulfilmentRequest) ProtoMessage() {}
func (*BillRefulfilmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bdf0a7aa9dc7a6, []int{1}
}
func (m *BillRefulfilmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillRefulfilmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillRefulfilmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillRefulfilmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillRefulfilmentRequest.Merge(m, src)
}
func (m *BillRefulfilmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *BillRefulfilmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BillRefulfilmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BillRefulfilmentRequest proto.InternalMessageInfo

func (m *BillRefulfilmentRequest) GetDelivery() *Delivery {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *BillRefulfilmentRequest) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

func (m *BillRefulfilmentRequest) GetTag() Tag {
	if m != nil {
		return m.Tag
	}
	return BILL_FULFILMENT_REQUEST_TAG_UNDEFINED
}

func (m *BillRefulfilmentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BillRefulfilmentRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *BillRefulfilmentRequest) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *BillRefulfilmentRequest) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

type Delivery struct {
	Name          string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email         string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PostalAddress []string `protobuf:"bytes,3,rep,name=postal_address,json=postalAddress,proto3" json:"postal_address,omitempty"`
}

func (m *Delivery) Reset()      { *m = Delivery{} }
func (*Delivery) ProtoMessage() {}
func (*Delivery) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bdf0a7aa9dc7a6, []int{2}
}
func (m *Delivery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delivery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delivery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delivery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delivery.Merge(m, src)
}
func (m *Delivery) XXX_Size() int {
	return m.Size()
}
func (m *Delivery) XXX_DiscardUnknown() {
	xxx_messageInfo_Delivery.DiscardUnknown(m)
}

var xxx_messageInfo_Delivery proto.InternalMessageInfo

func (m *Delivery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Delivery) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Delivery) GetPostalAddress() []string {
	if m != nil {
		return m.PostalAddress
	}
	return nil
}

type BillFulfilmentOutputAvailableEvent struct {
	Delivery  *Delivery `protobuf:"bytes,1,opt,name=delivery,proto3" json:"delivery,omitempty"`
	InvoiceId string    `protobuf:"bytes,2,opt,name=invoice_id,json=invoiceId,proto3" json:"invoice_id,omitempty"`
	Tag       Tag       `protobuf:"varint,3,opt,name=tag,proto3,enum=fulfilment.Tag" json:"tag,omitempty"`
	Id        string    `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// temporary fields
	AccountId string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Year      string `protobuf:"bytes,6,opt,name=year,proto3" json:"year,omitempty"`
	Month     string `protobuf:"bytes,7,opt,name=month,proto3" json:"month,omitempty"`
}

func (m *BillFulfilmentOutputAvailableEvent) Reset()      { *m = BillFulfilmentOutputAvailableEvent{} }
func (*BillFulfilmentOutputAvailableEvent) ProtoMessage() {}
func (*BillFulfilmentOutputAvailableEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_01bdf0a7aa9dc7a6, []int{3}
}
func (m *BillFulfilmentOutputAvailableEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillFulfilmentOutputAvailableEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillFulfilmentOutputAvailableEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillFulfilmentOutputAvailableEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillFulfilmentOutputAvailableEvent.Merge(m, src)
}
func (m *BillFulfilmentOutputAvailableEvent) XXX_Size() int {
	return m.Size()
}
func (m *BillFulfilmentOutputAvailableEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BillFulfilmentOutputAvailableEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BillFulfilmentOutputAvailableEvent proto.InternalMessageInfo

func (m *BillFulfilmentOutputAvailableEvent) GetDelivery() *Delivery {
	if m != nil {
		return m.Delivery
	}
	return nil
}

func (m *BillFulfilmentOutputAvailableEvent) GetInvoiceId() string {
	if m != nil {
		return m.InvoiceId
	}
	return ""
}

func (m *BillFulfilmentOutputAvailableEvent) GetTag() Tag {
	if m != nil {
		return m.Tag
	}
	return BILL_FULFILMENT_REQUEST_TAG_UNDEFINED
}

func (m *BillFulfilmentOutputAvailableEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BillFulfilmentOutputAvailableEvent) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *BillFulfilmentOutputAvailableEvent) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *BillFulfilmentOutputAvailableEvent) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

func init() {
	proto.RegisterEnum("fulfilment.Tag", Tag_name, Tag_value)
	proto.RegisterType((*BillFulfilmentRequest)(nil), "fulfilment.BillFulfilmentRequest")
	proto.RegisterType((*BillRefulfilmentRequest)(nil), "fulfilment.BillRefulfilmentRequest")
	proto.RegisterType((*Delivery)(nil), "fulfilment.Delivery")
	proto.RegisterType((*BillFulfilmentOutputAvailableEvent)(nil), "fulfilment.BillFulfilmentOutputAvailableEvent")
}

func init() { proto.RegisterFile("fulfilment.proto", fileDescriptor_01bdf0a7aa9dc7a6) }

var fileDescriptor_01bdf0a7aa9dc7a6 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0xcf, 0x8b, 0xd3, 0x40,
	0x1c, 0xc5, 0x33, 0xcd, 0xb6, 0xdd, 0x7e, 0x65, 0x6b, 0x19, 0x57, 0x0c, 0x82, 0x63, 0xad, 0x2c,
	0xd4, 0x85, 0x2d, 0xbb, 0x5d, 0xc5, 0xab, 0xad, 0x4d, 0x97, 0x40, 0xcc, 0xea, 0x24, 0xf5, 0xa0,
	0x87, 0x30, 0xdb, 0x4c, 0xeb, 0x40, 0x9a, 0xd4, 0x36, 0x2d, 0xec, 0xcd, 0x3f, 0x41, 0xfc, 0x2b,
	0x04, 0xff, 0x11, 0x8f, 0x3d, 0xee, 0xd1, 0xa6, 0x20, 0x1e, 0xd7, 0xff, 0x40, 0xf2, 0x63, 0xd7,
	0x78, 0x29, 0x45, 0x3c, 0x79, 0x9b, 0x79, 0xef, 0x7d, 0x1e, 0xaf, 0x0d, 0x0c, 0x54, 0x06, 0x33,
	0x77, 0x20, 0xdc, 0x11, 0xf7, 0x82, 0xc6, 0x78, 0xe2, 0x07, 0x3e, 0x86, 0xdf, 0xca, 0xdd, 0x1d,
	0xe1, 0xcd, 0x7d, 0xd1, 0xe7, 0x89, 0x55, 0xfb, 0x82, 0xe0, 0x76, 0x5b, 0xb8, 0x6e, 0xf7, 0x3a,
	0x41, 0xf9, 0xfb, 0x19, 0x9f, 0x06, 0xf8, 0x10, 0xb6, 0x1d, 0xee, 0x8a, 0x39, 0x9f, 0x9c, 0x2b,
	0xa8, 0x8a, 0xea, 0x37, 0x9a, 0xbb, 0x8d, 0x4c, 0x73, 0x27, 0xf5, 0xe8, 0x75, 0x0a, 0x1f, 0x40,
	0x31, 0x2d, 0x57, 0x72, 0x31, 0x70, 0x2b, 0x0b, 0x68, 0x89, 0x45, 0xaf, 0x32, 0xf8, 0x01, 0xc8,
	0x01, 0x1b, 0x2a, 0x72, 0x15, 0xd5, 0xcb, 0xcd, 0x9b, 0xd9, 0xa8, 0xc5, 0x86, 0x34, 0xf2, 0x70,
	0x19, 0x72, 0xc2, 0x51, 0xb6, 0xaa, 0xa8, 0x5e, 0xa2, 0x39, 0xe1, 0xd4, 0xbe, 0x23, 0xb8, 0x13,
	0xad, 0xa5, 0x7c, 0xf0, 0x0f, 0xf6, 0xde, 0x03, 0x48, 0xb7, 0xd8, 0xc2, 0x89, 0x27, 0x97, 0x68,
	0x29, 0x55, 0x34, 0xe7, 0x2f, 0xf6, 0x45, 0x8d, 0xac, 0xdf, 0xf7, 0x67, 0x5e, 0x10, 0x35, 0xe6,
	0x93, 0xc6, 0x54, 0xd1, 0x1c, 0x8c, 0x61, 0xeb, 0x9c, 0xb3, 0x89, 0x52, 0x88, 0x8d, 0xf8, 0x8c,
	0x77, 0x21, 0x3f, 0xf2, 0xbd, 0xe0, 0x9d, 0x52, 0x8c, 0xc5, 0xe4, 0x52, 0x7b, 0x0b, 0xdb, 0x57,
	0x83, 0x23, 0xca, 0x63, 0x23, 0x1e, 0xff, 0xa8, 0x12, 0x8d, 0xcf, 0x11, 0xc5, 0x47, 0x4c, 0xb8,
	0xe9, 0xea, 0xe4, 0x82, 0xf7, 0xa0, 0x3c, 0xf6, 0xa7, 0x01, 0x73, 0x6d, 0xe6, 0x38, 0x13, 0x3e,
	0x9d, 0x2a, 0x72, 0x55, 0xae, 0x97, 0xe8, 0x4e, 0xa2, 0xb6, 0x12, 0xb1, 0xf6, 0x13, 0x41, 0xed,
	0xcf, 0x6f, 0x7e, 0x3a, 0x0b, 0xc6, 0xb3, 0xa0, 0x35, 0x67, 0xc2, 0x65, 0x67, 0x2e, 0x57, 0xe7,
	0xdc, 0xfb, 0xbf, 0xfe, 0xd0, 0xfd, 0x4f, 0x32, 0xc8, 0x16, 0x1b, 0xe2, 0x47, 0xb0, 0xd7, 0xd6,
	0x74, 0xdd, 0xee, 0xf6, 0xf4, 0xae, 0xa6, 0xbf, 0x50, 0x0d, 0xcb, 0xa6, 0xea, 0xab, 0x9e, 0x6a,
	0x5a, 0xb6, 0xd5, 0x3a, 0xb1, 0x7b, 0x46, 0x47, 0xed, 0x6a, 0x86, 0xda, 0xa9, 0x48, 0xf8, 0x09,
	0x1c, 0xad, 0x8b, 0x52, 0xd5, 0xd4, 0x3a, 0xaa, 0x61, 0x69, 0x2d, 0xdd, 0x36, 0x4e, 0x0d, 0xfb,
	0x25, 0xd5, 0x0c, 0xab, 0x82, 0xf0, 0x11, 0x1c, 0x6c, 0x8a, 0x25, 0x48, 0x0e, 0x3f, 0x85, 0xe3,
	0x4d, 0x11, 0xbd, 0x45, 0x4f, 0xd4, 0x14, 0x94, 0x71, 0x13, 0x1a, 0xeb, 0xc0, 0x76, 0xcf, 0xd4,
	0x0c, 0xd5, 0x34, 0x33, 0xfb, 0xb6, 0x70, 0x03, 0xf6, 0x37, 0x62, 0x92, 0x7c, 0x1e, 0x3f, 0x86,
	0xc3, 0x8d, 0xf2, 0xd9, 0x65, 0x05, 0xfc, 0x10, 0xee, 0xaf, 0xa3, 0x9e, 0x9b, 0xaf, 0x2b, 0xc5,
	0xf6, 0xb3, 0xc5, 0x92, 0x48, 0x17, 0x4b, 0x22, 0x5d, 0x2e, 0x09, 0xfa, 0x10, 0x12, 0xf4, 0x39,
	0x24, 0xe8, 0x6b, 0x48, 0xd0, 0x22, 0x24, 0xe8, 0x5b, 0x48, 0xd0, 0x8f, 0x90, 0x48, 0x97, 0x21,
	0x41, 0x1f, 0x57, 0x44, 0x5a, 0xac, 0x88, 0x74, 0xb1, 0x22, 0xd2, 0x9b, 0xcc, 0x6b, 0x76, 0x56,
	0x88, 0x5f, 0xb1, 0xe3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x0e, 0xde, 0xb1, 0xf4, 0x04,
	0x00, 0x00,
}

func (x Tag) String() string {
	s, ok := Tag_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *BillFulfilmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BillFulfilmentRequest)
	if !ok {
		that2, ok := that.(BillFulfilmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delivery.Equal(that1.Delivery) {
		return false
	}
	if !this.Invoice.Equal(that1.Invoice) {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *BillRefulfilmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BillRefulfilmentRequest)
	if !ok {
		that2, ok := that.(BillRefulfilmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delivery.Equal(that1.Delivery) {
		return false
	}
	if this.InvoiceId != that1.InvoiceId {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	return true
}
func (this *Delivery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Delivery)
	if !ok {
		that2, ok := that.(Delivery)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if len(this.PostalAddress) != len(that1.PostalAddress) {
		return false
	}
	for i := range this.PostalAddress {
		if this.PostalAddress[i] != that1.PostalAddress[i] {
			return false
		}
	}
	return true
}
func (this *BillFulfilmentOutputAvailableEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BillFulfilmentOutputAvailableEvent)
	if !ok {
		that2, ok := that.(BillFulfilmentOutputAvailableEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Delivery.Equal(that1.Delivery) {
		return false
	}
	if this.InvoiceId != that1.InvoiceId {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if this.Year != that1.Year {
		return false
	}
	if this.Month != that1.Month {
		return false
	}
	return true
}
func (this *BillFulfilmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fulfilment.BillFulfilmentRequest{")
	if this.Delivery != nil {
		s = append(s, "Delivery: "+fmt.Sprintf("%#v", this.Delivery)+",\n")
	}
	if this.Invoice != nil {
		s = append(s, "Invoice: "+fmt.Sprintf("%#v", this.Invoice)+",\n")
	}
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BillRefulfilmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&fulfilment.BillRefulfilmentRequest{")
	if this.Delivery != nil {
		s = append(s, "Delivery: "+fmt.Sprintf("%#v", this.Delivery)+",\n")
	}
	s = append(s, "InvoiceId: "+fmt.Sprintf("%#v", this.InvoiceId)+",\n")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Delivery) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&fulfilment.Delivery{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "PostalAddress: "+fmt.Sprintf("%#v", this.PostalAddress)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BillFulfilmentOutputAvailableEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&fulfilment.BillFulfilmentOutputAvailableEvent{")
	if this.Delivery != nil {
		s = append(s, "Delivery: "+fmt.Sprintf("%#v", this.Delivery)+",\n")
	}
	s = append(s, "InvoiceId: "+fmt.Sprintf("%#v", this.InvoiceId)+",\n")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	s = append(s, "Year: "+fmt.Sprintf("%#v", this.Year)+",\n")
	s = append(s, "Month: "+fmt.Sprintf("%#v", this.Month)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFulfilment(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BillFulfilmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillFulfilmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillFulfilmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.Tag != 0 {
		i = encodeVarintFulfilment(dAtA, i, uint64(m.Tag))
		i--
		dAtA[i] = 0x18
	}
	if m.Invoice != nil {
		{
			size, err := m.Invoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFulfilment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Delivery != nil {
		{
			size, err := m.Delivery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFulfilment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BillRefulfilmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillRefulfilmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillRefulfilmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Month) > 0 {
		i -= len(m.Month)
		copy(dAtA[i:], m.Month)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Month)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Year) > 0 {
		i -= len(m.Year)
		copy(dAtA[i:], m.Year)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Year)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.Tag != 0 {
		i = encodeVarintFulfilment(dAtA, i, uint64(m.Tag))
		i--
		dAtA[i] = 0x18
	}
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Delivery != nil {
		{
			size, err := m.Delivery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFulfilment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Delivery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delivery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delivery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PostalAddress) > 0 {
		for iNdEx := len(m.PostalAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PostalAddress[iNdEx])
			copy(dAtA[i:], m.PostalAddress[iNdEx])
			i = encodeVarintFulfilment(dAtA, i, uint64(len(m.PostalAddress[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BillFulfilmentOutputAvailableEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillFulfilmentOutputAvailableEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillFulfilmentOutputAvailableEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Month) > 0 {
		i -= len(m.Month)
		copy(dAtA[i:], m.Month)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Month)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Year) > 0 {
		i -= len(m.Year)
		copy(dAtA[i:], m.Year)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Year)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if m.Tag != 0 {
		i = encodeVarintFulfilment(dAtA, i, uint64(m.Tag))
		i--
		dAtA[i] = 0x18
	}
	if len(m.InvoiceId) > 0 {
		i -= len(m.InvoiceId)
		copy(dAtA[i:], m.InvoiceId)
		i = encodeVarintFulfilment(dAtA, i, uint64(len(m.InvoiceId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Delivery != nil {
		{
			size, err := m.Delivery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFulfilment(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFulfilment(dAtA []byte, offset int, v uint64) int {
	offset -= sovFulfilment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BillFulfilmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delivery != nil {
		l = m.Delivery.Size()
		n += 1 + l + sovFulfilment(uint64(l))
	}
	if m.Invoice != nil {
		l = m.Invoice.Size()
		n += 1 + l + sovFulfilment(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFulfilment(uint64(m.Tag))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	return n
}

func (m *BillRefulfilmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delivery != nil {
		l = m.Delivery.Size()
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFulfilment(uint64(m.Tag))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.Year)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.Month)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	return n
}

func (m *Delivery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	if len(m.PostalAddress) > 0 {
		for _, s := range m.PostalAddress {
			l = len(s)
			n += 1 + l + sovFulfilment(uint64(l))
		}
	}
	return n
}

func (m *BillFulfilmentOutputAvailableEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delivery != nil {
		l = m.Delivery.Size()
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.InvoiceId)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovFulfilment(uint64(m.Tag))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.Year)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	l = len(m.Month)
	if l > 0 {
		n += 1 + l + sovFulfilment(uint64(l))
	}
	return n
}

func sovFulfilment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFulfilment(x uint64) (n int) {
	return sovFulfilment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BillFulfilmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BillFulfilmentRequest{`,
		`Delivery:` + strings.Replace(this.Delivery.String(), "Delivery", "Delivery", 1) + `,`,
		`Invoice:` + strings.Replace(fmt.Sprintf("%v", this.Invoice), "Invoice", "Invoice", 1) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BillRefulfilmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BillRefulfilmentRequest{`,
		`Delivery:` + strings.Replace(this.Delivery.String(), "Delivery", "Delivery", 1) + `,`,
		`InvoiceId:` + fmt.Sprintf("%v", this.InvoiceId) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Delivery) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Delivery{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`PostalAddress:` + fmt.Sprintf("%v", this.PostalAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BillFulfilmentOutputAvailableEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BillFulfilmentOutputAvailableEvent{`,
		`Delivery:` + strings.Replace(this.Delivery.String(), "Delivery", "Delivery", 1) + `,`,
		`InvoiceId:` + fmt.Sprintf("%v", this.InvoiceId) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`Year:` + fmt.Sprintf("%v", this.Year) + `,`,
		`Month:` + fmt.Sprintf("%v", this.Month) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFulfilment(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BillFulfilmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFulfilment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillFulfilmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillFulfilmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delivery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delivery == nil {
				m.Delivery = &Delivery{}
			}
			if err := m.Delivery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invoice == nil {
				m.Invoice = &Invoice{}
			}
			if err := m.Invoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= Tag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFulfilment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillRefulfilmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFulfilment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillRefulfilmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillRefulfilmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delivery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delivery == nil {
				m.Delivery = &Delivery{}
			}
			if err := m.Delivery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= Tag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Year = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Month = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFulfilment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delivery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFulfilment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delivery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delivery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostalAddress = append(m.PostalAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFulfilment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BillFulfilmentOutputAvailableEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFulfilment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillFulfilmentOutputAvailableEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillFulfilmentOutputAvailableEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delivery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delivery == nil {
				m.Delivery = &Delivery{}
			}
			if err := m.Delivery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= Tag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Year = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFulfilment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFulfilment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Month = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFulfilment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFulfilment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFulfilment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFulfilment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFulfilment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFulfilment
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFulfilment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFulfilment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFulfilment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFulfilment
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFulfilment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFulfilment   = fmt.Errorf("proto: integer overflow")
)
